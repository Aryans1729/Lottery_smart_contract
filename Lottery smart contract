// A lottery contest is initiated by the manager or the one who is deploying
// conditions for Enter() are 1.manager cannot enter the contest .
//                            2.already entered player cannot enter again.
//                            3. minimal fee every contestant has to pay.
// conditions for manager 1.he will randomly generate a hash value from abi.encodepacked
// and that hash value is of the winner 


pragma solidity >=0.7.0 <0.9.0;
// SPDX-License-Identifier: MIT

contract Lottery{
    address public manager;
    address payable[] public players;

    constructor(){
        manager=msg.sender;
    }

    function alreadyEntered() view public returns(bool){
        for(uint i=0;i<players.length;i++){
            if(players[i]==msg.sender)
            return true;
        }
        return false;
    }

    function Enter() public payable {
    require(msg.sender !=manager,"Manager cinnot enter the contest");
    require(alreadyEntered() == false,"Player already entered");
    require(msg.value > 1 ether,"Minimum amount must be payed");
    players.push(payable(msg.sender));

    }

    function random() view private returns(uint){
        return uint(sha256(abi.encodePacked(block.difficulty,block.number,players)));
    }
    
    function pickwinner() public{
        require(msg.sender == manager,"Only manager can pick the winner");
        uint index = random() % players.length;
        address contactaddress = address(this);
        players[index].transfer(contactaddress.balance);
        players = new address payable[](0);
    }

    function getplayers() view public returns(address payable[] memory){
        return players;
    }
}
